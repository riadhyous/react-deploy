{"ast":null,"code":"import _regeneratorRuntime from \"/home/nino420/Desktop/TodoReactApp/Firebase-auth-chat-app-master/node_modules/@babel/runtime/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(saveImageToTheStorage),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(getIsUserIdDocumentExists),\n    _marked3 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(worker_setAvatar);\n\nimport { put } from 'redux-saga/effects';\nimport { toast } from 'react-toastify';\nimport { setAvatarSuccess, setAvatarError } from './actions';\nimport { firebase_app } from '../../../api/firebase';\n\nfunction saveImageToTheStorage(imageBlob) {\n  var _firebase_app$auth$cu;\n\n  var userId, storageReference;\n  return _regeneratorRuntime.wrap(function saveImageToTheStorage$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          userId = (_firebase_app$auth$cu = firebase_app.auth().currentUser) === null || _firebase_app$auth$cu === void 0 ? void 0 : _firebase_app$auth$cu.uid;\n          storageReference = firebase_app.storage().ref().child(\"images/\".concat(userId, \"/avatar.jpg\"));\n          _context.next = 4;\n          return storageReference.put(imageBlob, {\n            contentType: 'image/jpeg'\n          });\n\n        case 4:\n          return _context.abrupt(\"return\", _context.sent);\n\n        case 5:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n}\n\nfunction getIsUserIdDocumentExists() {\n  var _firebase_app$auth$cu2;\n\n  var userId, documentReference, res, document;\n  return _regeneratorRuntime.wrap(function getIsUserIdDocumentExists$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          userId = (_firebase_app$auth$cu2 = firebase_app.auth().currentUser) === null || _firebase_app$auth$cu2 === void 0 ? void 0 : _firebase_app$auth$cu2.uid;\n          documentReference = firebase_app.firestore().collection('profiles').doc(userId);\n          _context2.next = 4;\n          return documentReference.get();\n\n        case 4:\n          res = _context2.sent;\n          // @ts-ignore\n          document = res.data();\n          return _context2.abrupt(\"return\", Boolean(document));\n\n        case 7:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nexport function worker_setAvatar(action) {\n  var infoToastID, _firebase_app$auth$cu3, uploadedImage, isDocumentExists, downloadURL, userId, doRef;\n\n  return _regeneratorRuntime.wrap(function worker_setAvatar$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          infoToastID = toast.info('Loading');\n          _context3.next = 4;\n          return saveImageToTheStorage(action.payload);\n\n        case 4:\n          uploadedImage = _context3.sent;\n          _context3.next = 7;\n          return getIsUserIdDocumentExists();\n\n        case 7:\n          isDocumentExists = _context3.sent;\n          _context3.next = 10;\n          return uploadedImage.ref.getDownloadURL();\n\n        case 10:\n          downloadURL = _context3.sent;\n          userId = (_firebase_app$auth$cu3 = firebase_app.auth().currentUser) === null || _firebase_app$auth$cu3 === void 0 ? void 0 : _firebase_app$auth$cu3.uid;\n          doRef = firebase_app.firestore().collection('profiles').doc(userId);\n\n          if (!isDocumentExists) {\n            _context3.next = 18;\n            break;\n          }\n\n          _context3.next = 16;\n          return doRef.update({\n            avatar: downloadURL\n          });\n\n        case 16:\n          _context3.next = 20;\n          break;\n\n        case 18:\n          _context3.next = 20;\n          return doRef.set({\n            avatar: downloadURL\n          });\n\n        case 20:\n          toast.dismiss(infoToastID);\n          toast.success('Avatar image saved');\n          _context3.next = 24;\n          return put(setAvatarSuccess(uploadedImage));\n\n        case 24:\n          _context3.next = 32;\n          break;\n\n        case 26:\n          _context3.prev = 26;\n          _context3.t0 = _context3[\"catch\"](0);\n          toast.dismiss(infoToastID);\n          toast.error(_context3.t0.message);\n          _context3.next = 32;\n          return put(setAvatarError(_context3.t0));\n\n        case 32:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 26]]);\n}","map":{"version":3,"sources":["/home/nino420/Desktop/TodoReactApp/Firebase-auth-chat-app-master/src/store/profile/setAvatar/sagas.ts"],"names":["saveImageToTheStorage","getIsUserIdDocumentExists","worker_setAvatar","put","toast","setAvatarSuccess","setAvatarError","firebase_app","imageBlob","userId","auth","currentUser","uid","storageReference","storage","ref","child","contentType","documentReference","firestore","collection","doc","get","res","document","data","Boolean","action","infoToastID","info","payload","uploadedImage","isDocumentExists","getDownloadURL","downloadURL","doRef","update","avatar","set","dismiss","success","error","message"],"mappings":"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","sourcesContent":["import { put } from 'redux-saga/effects';\nimport { toast } from 'react-toastify';\nimport { setAvatarSuccess, setAvatarError } from './actions';\nimport { firebase_app } from '../../../api/firebase';\n\nfunction* saveImageToTheStorage(imageBlob: Blob): IterableIterator<any> {\n    const userId = firebase_app.auth().currentUser?.uid;\n\n    const storageReference = firebase_app.storage().ref().child(`images/${userId}/avatar.jpg`);\n\n    return yield storageReference.put(imageBlob, {\n        contentType: 'image/jpeg',\n    });\n}\n\nfunction* getIsUserIdDocumentExists(): IterableIterator<any> {\n    const userId = firebase_app.auth().currentUser?.uid;\n\n    const documentReference = firebase_app.firestore().collection('profiles').doc(userId);\n    const res = yield documentReference.get();\n\n    // @ts-ignore\n    const document = res.data();\n\n    return Boolean(document);\n}\n\nexport function* worker_setAvatar(action: Record<'payload', Blob>): IterableIterator<any> {\n    let infoToastID;\n    try {\n        infoToastID = toast.info('Loading');\n\n        const uploadedImage = yield saveImageToTheStorage(action.payload);\n\n        const isDocumentExists = yield getIsUserIdDocumentExists();\n\n        // @ts-ignore\n        const downloadURL = yield uploadedImage.ref.getDownloadURL();\n\n        const userId = firebase_app.auth().currentUser?.uid;\n        const doRef = firebase_app.firestore().collection('profiles').doc(userId);\n\n        if (isDocumentExists) {\n            yield doRef.update({\n                avatar: downloadURL,\n            });\n        } else {\n            yield doRef.set({\n                avatar: downloadURL,\n            });\n        }\n\n        toast.dismiss(infoToastID);\n        toast.success('Avatar image saved');\n\n        yield put(setAvatarSuccess(uploadedImage));\n    } catch (error) {\n        toast.dismiss(infoToastID);\n        toast.error(error.message);\n\n        yield put(setAvatarError(error));\n    }\n}\n"]},"metadata":{},"sourceType":"module"}